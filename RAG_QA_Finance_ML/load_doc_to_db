import torch
from langchain_community.document_loaders import PyPDFDirectoryLoader
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import Pinecone 
from langchain_community.embeddings import SentenceTransformerEmbeddings

#Please update your pinecone-client package version >=3.0.1
from pinecone import Pinecone as PineconeClient #Importing the Pinecone class from the pinecone package
from langchain_community.vectorstores import Pinecone

from dotenv import load_dotenv

load_dotenv()

#Function to read documents
def load_docs(directory):
  """
    Given a directory, load every document in it.

    Input (s):
      directory (str): a path to directory 
    
    Return:
      loaded documents, ready to be processed further
  """

  loader = PyPDFDirectoryLoader(directory)
  documents = loader.load()
  return documents

#This function will split the documents into chunks
def split_docs(documents, chunk_size=1000, chunk_overlap=250):
  """
    Given the document, split them into chunks that have an overlapping length of aa specified value

    Input (s):
      documents: a loaded document, can be obtained by callinf the load_docs() function
      chunk_size (int): The size of each chunk. Default to 1000.
      chunk_overlap(int): The overlapping length between the chunk, the higher chunk_overlap value, the more context preserved 
                          (at the cost of more resource consumption). Default to 250.
    
    Return:
      a splitted docs, ready to be uploaded to the Pinecone vector database
  """

  text_splitter = RecursiveCharacterTextSplitter(chunk_size=chunk_size, chunk_overlap=chunk_overlap)
  docs = text_splitter.split_documents(documents)
  return docs

# Passing the directory to the 'load_docs' function
print("Preparing document for embedding ...")
directory = r'C:\Users\Acha\Desktop\Python_personal_project\RAG_QA_Finance_ML\Documents_Test'
documents = load_docs(directory)
docs = split_docs(documents)
print("Preparing document complete!")

# embeddings = SentenceTransformerEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2")

print("Preparing Sentence Transformer ...")
model_kwargs = {'device': 'cuda' if torch.cuda.is_available() else 'cpu'}
encode_kwargs = {'normalize_embeddings': False}
embeddings = HuggingFaceEmbeddings(
    model_name=constants.EMBEDDER_NAME,
    model_kwargs=model_kwargs,
    encode_kwargs=encode_kwargs
)
print("Preparing Sentence Transformer complete!")

print("Start uploading to Pinecone ...")
PineconeClient(environment="gcp-starter")
index_name="ragfinanceml"
index = Pinecone.from_documents(docs, embeddings, index_name=index_name)
print("Uploading complete!")